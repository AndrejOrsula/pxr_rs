//! This file is automatically @generated by the pxr_build.
//! It is not intended for manual editing.

// Rust bool as C++ pxr::VtValue<bool>
#[automatically_derived]
impl From<bool> for crate::pxr::VtValue {
    fn from(value: bool) -> Self {
        unsafe {
            ::cpp::cpp!([value as "bool"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&bool> for crate::pxr::VtValue {
    fn from(value: &bool) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const bool *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for bool {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "bool" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> bool as "bool" {
                    return value.Get<bool>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type bool.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for bool {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "bool" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> bool as "bool" {
                    return value->Get<bool>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type bool.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<bool> for crate::pxr::VtValue {
    fn as_ref(&self) -> &bool {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &bool as "const bool *" {
                return &(self->Get<bool>());
            })
        }
    }
}

// Rust u8 as C++ pxr::VtValue<uint8_t>
#[automatically_derived]
impl From<u8> for crate::pxr::VtValue {
    fn from(value: u8) -> Self {
        unsafe {
            ::cpp::cpp!([value as "uint8_t"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&u8> for crate::pxr::VtValue {
    fn from(value: &u8) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const uint8_t *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for u8 {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "unsigned char" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> u8 as "uint8_t" {
                    return value.Get<uint8_t>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type u8.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for u8 {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "unsigned char" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> u8 as "uint8_t" {
                    return value->Get<uint8_t>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type u8.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<u8> for crate::pxr::VtValue {
    fn as_ref(&self) -> &u8 {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &u8 as "const uint8_t *" {
                return &(self->Get<uint8_t>());
            })
        }
    }
}

// Rust i32 as C++ pxr::VtValue<int32_t>
#[automatically_derived]
impl From<i32> for crate::pxr::VtValue {
    fn from(value: i32) -> Self {
        unsafe {
            ::cpp::cpp!([value as "int32_t"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&i32> for crate::pxr::VtValue {
    fn from(value: &i32) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const int32_t *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for i32 {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "int" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> i32 as "int32_t" {
                    return value.Get<int32_t>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type i32.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for i32 {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "int" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> i32 as "int32_t" {
                    return value->Get<int32_t>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type i32.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<i32> for crate::pxr::VtValue {
    fn as_ref(&self) -> &i32 {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &i32 as "const int32_t *" {
                return &(self->Get<int32_t>());
            })
        }
    }
}

// Rust u32 as C++ pxr::VtValue<uint32_t>
#[automatically_derived]
impl From<u32> for crate::pxr::VtValue {
    fn from(value: u32) -> Self {
        unsafe {
            ::cpp::cpp!([value as "uint32_t"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&u32> for crate::pxr::VtValue {
    fn from(value: &u32) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const uint32_t *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for u32 {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "unsigned int" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> u32 as "uint32_t" {
                    return value.Get<uint32_t>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type u32.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for u32 {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "unsigned int" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> u32 as "uint32_t" {
                    return value->Get<uint32_t>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type u32.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<u32> for crate::pxr::VtValue {
    fn as_ref(&self) -> &u32 {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &u32 as "const uint32_t *" {
                return &(self->Get<uint32_t>());
            })
        }
    }
}

// Rust i64 as C++ pxr::VtValue<int64_t>
#[automatically_derived]
impl From<i64> for crate::pxr::VtValue {
    fn from(value: i64) -> Self {
        unsafe {
            ::cpp::cpp!([value as "int64_t"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&i64> for crate::pxr::VtValue {
    fn from(value: &i64) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const int64_t *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for i64 {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "long" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> i64 as "int64_t" {
                    return value.Get<int64_t>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type i64.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for i64 {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "long" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> i64 as "int64_t" {
                    return value->Get<int64_t>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type i64.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<i64> for crate::pxr::VtValue {
    fn as_ref(&self) -> &i64 {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &i64 as "const int64_t *" {
                return &(self->Get<int64_t>());
            })
        }
    }
}

// Rust u64 as C++ pxr::VtValue<uint64_t>
#[automatically_derived]
impl From<u64> for crate::pxr::VtValue {
    fn from(value: u64) -> Self {
        unsafe {
            ::cpp::cpp!([value as "uint64_t"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&u64> for crate::pxr::VtValue {
    fn from(value: &u64) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const uint64_t *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for u64 {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "unsigned long" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> u64 as "uint64_t" {
                    return value.Get<uint64_t>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type u64.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for u64 {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "unsigned long" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> u64 as "uint64_t" {
                    return value->Get<uint64_t>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type u64.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<u64> for crate::pxr::VtValue {
    fn as_ref(&self) -> &u64 {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &u64 as "const uint64_t *" {
                return &(self->Get<uint64_t>());
            })
        }
    }
}

// Rust crate::pxr::GfHalf as C++ pxr::VtValue<pxr::GfHalf>
#[automatically_derived]
impl From<crate::pxr::GfHalf> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfHalf) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfHalf"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfHalf> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfHalf) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfHalf *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfHalf {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "pxr_half::half" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfHalf as "pxr::GfHalf" {
                    return value.Get<pxr::GfHalf>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfHalf.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfHalf {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "pxr_half::half" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfHalf as "pxr::GfHalf" {
                    return value->Get<pxr::GfHalf>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfHalf.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfHalf> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfHalf {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfHalf as "const pxr::GfHalf *" {
                return &(self->Get<pxr::GfHalf>());
            })
        }
    }
}

// Rust ::half::f16 as C++ pxr::VtValue<pxr::GfHalf>
#[automatically_derived]
impl From<::half::f16> for crate::pxr::VtValue {
    fn from(value: ::half::f16) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfHalf"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&::half::f16> for crate::pxr::VtValue {
    fn from(value: &::half::f16) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfHalf *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for ::half::f16 {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "pxr_half::half" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> ::half::f16 as "pxr::GfHalf" {
                    return value.Get<pxr::GfHalf>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type ::half::f16.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for ::half::f16 {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "pxr_half::half" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> ::half::f16 as "pxr::GfHalf" {
                    return value->Get<pxr::GfHalf>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type ::half::f16.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<::half::f16> for crate::pxr::VtValue {
    fn as_ref(&self) -> &::half::f16 {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &::half::f16 as "const pxr::GfHalf *" {
                return &(self->Get<pxr::GfHalf>());
            })
        }
    }
}

// Rust f32 as C++ pxr::VtValue<float>
#[automatically_derived]
impl From<f32> for crate::pxr::VtValue {
    fn from(value: f32) -> Self {
        unsafe {
            ::cpp::cpp!([value as "float"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&f32> for crate::pxr::VtValue {
    fn from(value: &f32) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const float *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for f32 {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "float" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> f32 as "float" {
                    return value.Get<float>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type f32.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for f32 {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "float" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> f32 as "float" {
                    return value->Get<float>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type f32.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<f32> for crate::pxr::VtValue {
    fn as_ref(&self) -> &f32 {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &f32 as "const float *" {
                return &(self->Get<float>());
            })
        }
    }
}

// Rust f64 as C++ pxr::VtValue<double>
#[automatically_derived]
impl From<f64> for crate::pxr::VtValue {
    fn from(value: f64) -> Self {
        unsafe {
            ::cpp::cpp!([value as "double"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&f64> for crate::pxr::VtValue {
    fn from(value: &f64) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const double *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for f64 {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "double" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> f64 as "double" {
                    return value.Get<double>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type f64.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for f64 {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "double" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> f64 as "double" {
                    return value->Get<double>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type f64.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<f64> for crate::pxr::VtValue {
    fn as_ref(&self) -> &f64 {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &f64 as "const double *" {
                return &(self->Get<double>());
            })
        }
    }
}

// Rust crate::pxr::SdfTimeCode as C++ pxr::VtValue<pxr::SdfTimeCode>
#[automatically_derived]
impl From<crate::pxr::SdfTimeCode> for crate::pxr::VtValue {
    fn from(value: crate::pxr::SdfTimeCode) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::SdfTimeCode"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::SdfTimeCode> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::SdfTimeCode) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::SdfTimeCode *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::SdfTimeCode {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "SdfTimeCode" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::SdfTimeCode as "pxr::SdfTimeCode" {
                    return value.Get<pxr::SdfTimeCode>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::SdfTimeCode.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::SdfTimeCode {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "SdfTimeCode" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::SdfTimeCode as "pxr::SdfTimeCode" {
                    return value->Get<pxr::SdfTimeCode>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::SdfTimeCode.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::SdfTimeCode> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::SdfTimeCode {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::SdfTimeCode as "const pxr::SdfTimeCode *" {
                return &(self->Get<pxr::SdfTimeCode>());
            })
        }
    }
}

// Rust crate::pxr::TfToken as C++ pxr::VtValue<pxr::TfToken>
#[automatically_derived]
impl From<crate::pxr::TfToken> for crate::pxr::VtValue {
    fn from(value: crate::pxr::TfToken) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::TfToken"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::TfToken> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::TfToken) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::TfToken *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::TfToken {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "TfToken" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::TfToken as "pxr::TfToken" {
                    return value.Get<pxr::TfToken>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::TfToken.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::TfToken {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "TfToken" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::TfToken as "pxr::TfToken" {
                    return value->Get<pxr::TfToken>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::TfToken.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::TfToken> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::TfToken {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::TfToken as "const pxr::TfToken *" {
                return &(self->Get<pxr::TfToken>());
            })
        }
    }
}

// Rust crate::pxr::SdfAssetPath as C++ pxr::VtValue<pxr::SdfAssetPath>
#[automatically_derived]
impl From<crate::pxr::SdfAssetPath> for crate::pxr::VtValue {
    fn from(value: crate::pxr::SdfAssetPath) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::SdfAssetPath"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::SdfAssetPath> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::SdfAssetPath) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::SdfAssetPath *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::SdfAssetPath {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "SdfAssetPath" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::SdfAssetPath as "pxr::SdfAssetPath" {
                    return value.Get<pxr::SdfAssetPath>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::SdfAssetPath.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::SdfAssetPath {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "SdfAssetPath" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::SdfAssetPath as "pxr::SdfAssetPath" {
                    return value->Get<pxr::SdfAssetPath>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::SdfAssetPath.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::SdfAssetPath> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::SdfAssetPath {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::SdfAssetPath as "const pxr::SdfAssetPath *" {
                return &(self->Get<pxr::SdfAssetPath>());
            })
        }
    }
}

// Rust crate::pxr::GfMatrix2d as C++ pxr::VtValue<pxr::GfMatrix2d>
#[automatically_derived]
impl From<crate::pxr::GfMatrix2d> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfMatrix2d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfMatrix2d"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfMatrix2d> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfMatrix2d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfMatrix2d *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfMatrix2d {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfMatrix2d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfMatrix2d as "pxr::GfMatrix2d" {
                    return value.Get<pxr::GfMatrix2d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfMatrix2d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfMatrix2d {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfMatrix2d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfMatrix2d as "pxr::GfMatrix2d" {
                    return value->Get<pxr::GfMatrix2d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfMatrix2d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfMatrix2d> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfMatrix2d {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfMatrix2d as "const pxr::GfMatrix2d *" {
                return &(self->Get<pxr::GfMatrix2d>());
            })
        }
    }
}

// Rust crate::pxr::GfMatrix3d as C++ pxr::VtValue<pxr::GfMatrix3d>
#[automatically_derived]
impl From<crate::pxr::GfMatrix3d> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfMatrix3d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfMatrix3d"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfMatrix3d> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfMatrix3d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfMatrix3d *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfMatrix3d {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfMatrix3d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfMatrix3d as "pxr::GfMatrix3d" {
                    return value.Get<pxr::GfMatrix3d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfMatrix3d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfMatrix3d {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfMatrix3d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfMatrix3d as "pxr::GfMatrix3d" {
                    return value->Get<pxr::GfMatrix3d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfMatrix3d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfMatrix3d> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfMatrix3d {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfMatrix3d as "const pxr::GfMatrix3d *" {
                return &(self->Get<pxr::GfMatrix3d>());
            })
        }
    }
}

// Rust crate::pxr::GfMatrix4d as C++ pxr::VtValue<pxr::GfMatrix4d>
#[automatically_derived]
impl From<crate::pxr::GfMatrix4d> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfMatrix4d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfMatrix4d"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfMatrix4d> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfMatrix4d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfMatrix4d *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfMatrix4d {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfMatrix4d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfMatrix4d as "pxr::GfMatrix4d" {
                    return value.Get<pxr::GfMatrix4d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfMatrix4d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfMatrix4d {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfMatrix4d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfMatrix4d as "pxr::GfMatrix4d" {
                    return value->Get<pxr::GfMatrix4d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfMatrix4d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfMatrix4d> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfMatrix4d {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfMatrix4d as "const pxr::GfMatrix4d *" {
                return &(self->Get<pxr::GfMatrix4d>());
            })
        }
    }
}

// Rust crate::pxr::GfQuatd as C++ pxr::VtValue<pxr::GfQuatd>
#[automatically_derived]
impl From<crate::pxr::GfQuatd> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfQuatd) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfQuatd"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfQuatd> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfQuatd) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfQuatd *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfQuatd {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfQuatd" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfQuatd as "pxr::GfQuatd" {
                    return value.Get<pxr::GfQuatd>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfQuatd.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfQuatd {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfQuatd" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfQuatd as "pxr::GfQuatd" {
                    return value->Get<pxr::GfQuatd>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfQuatd.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfQuatd> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfQuatd {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfQuatd as "const pxr::GfQuatd *" {
                return &(self->Get<pxr::GfQuatd>());
            })
        }
    }
}

// Rust crate::pxr::GfQuatf as C++ pxr::VtValue<pxr::GfQuatf>
#[automatically_derived]
impl From<crate::pxr::GfQuatf> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfQuatf) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfQuatf"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfQuatf> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfQuatf) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfQuatf *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfQuatf {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfQuatf" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfQuatf as "pxr::GfQuatf" {
                    return value.Get<pxr::GfQuatf>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfQuatf.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfQuatf {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfQuatf" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfQuatf as "pxr::GfQuatf" {
                    return value->Get<pxr::GfQuatf>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfQuatf.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfQuatf> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfQuatf {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfQuatf as "const pxr::GfQuatf *" {
                return &(self->Get<pxr::GfQuatf>());
            })
        }
    }
}

// Rust crate::pxr::GfQuath as C++ pxr::VtValue<pxr::GfQuath>
#[automatically_derived]
impl From<crate::pxr::GfQuath> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfQuath) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfQuath"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfQuath> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfQuath) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfQuath *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfQuath {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfQuath" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfQuath as "pxr::GfQuath" {
                    return value.Get<pxr::GfQuath>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfQuath.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfQuath {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfQuath" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfQuath as "pxr::GfQuath" {
                    return value->Get<pxr::GfQuath>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfQuath.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfQuath> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfQuath {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfQuath as "const pxr::GfQuath *" {
                return &(self->Get<pxr::GfQuath>());
            })
        }
    }
}

// Rust crate::pxr::GfVec2d as C++ pxr::VtValue<pxr::GfVec2d>
#[automatically_derived]
impl From<crate::pxr::GfVec2d> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec2d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec2d"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec2d> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec2d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec2d *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec2d {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec2d as "pxr::GfVec2d" {
                    return value.Get<pxr::GfVec2d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec2d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec2d {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec2d as "pxr::GfVec2d" {
                    return value->Get<pxr::GfVec2d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec2d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec2d> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec2d {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec2d as "const pxr::GfVec2d *" {
                return &(self->Get<pxr::GfVec2d>());
            })
        }
    }
}

// Rust [f64; 2] as C++ pxr::VtValue<pxr::GfVec2d>
#[automatically_derived]
impl From<[f64; 2]> for crate::pxr::VtValue {
    fn from(value: [f64; 2]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec2d"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[f64; 2]> for crate::pxr::VtValue {
    fn from(value: &[f64; 2]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec2d *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [f64; 2] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [f64; 2] as "pxr::GfVec2d" {
                    return value.Get<pxr::GfVec2d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f64; 2].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [f64; 2] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [f64; 2] as "pxr::GfVec2d" {
                    return value->Get<pxr::GfVec2d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f64; 2].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[f64; 2]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[f64; 2] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[f64; 2] as "const pxr::GfVec2d *" {
                return &(self->Get<pxr::GfVec2d>());
            })
        }
    }
}

// Rust crate::pxr::GfVec2f as C++ pxr::VtValue<pxr::GfVec2f>
#[automatically_derived]
impl From<crate::pxr::GfVec2f> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec2f) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec2f"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec2f> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec2f) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec2f *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec2f {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec2f as "pxr::GfVec2f" {
                    return value.Get<pxr::GfVec2f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec2f.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec2f {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec2f as "pxr::GfVec2f" {
                    return value->Get<pxr::GfVec2f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec2f.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec2f> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec2f {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec2f as "const pxr::GfVec2f *" {
                return &(self->Get<pxr::GfVec2f>());
            })
        }
    }
}

// Rust [f32; 2] as C++ pxr::VtValue<pxr::GfVec2f>
#[automatically_derived]
impl From<[f32; 2]> for crate::pxr::VtValue {
    fn from(value: [f32; 2]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec2f"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[f32; 2]> for crate::pxr::VtValue {
    fn from(value: &[f32; 2]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec2f *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [f32; 2] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [f32; 2] as "pxr::GfVec2f" {
                    return value.Get<pxr::GfVec2f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f32; 2].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [f32; 2] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [f32; 2] as "pxr::GfVec2f" {
                    return value->Get<pxr::GfVec2f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f32; 2].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[f32; 2]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[f32; 2] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[f32; 2] as "const pxr::GfVec2f *" {
                return &(self->Get<pxr::GfVec2f>());
            })
        }
    }
}

// Rust crate::pxr::GfVec2h as C++ pxr::VtValue<pxr::GfVec2h>
#[automatically_derived]
impl From<crate::pxr::GfVec2h> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec2h) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec2h"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec2h> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec2h) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec2h *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec2h {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec2h as "pxr::GfVec2h" {
                    return value.Get<pxr::GfVec2h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec2h.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec2h {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec2h as "pxr::GfVec2h" {
                    return value->Get<pxr::GfVec2h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec2h.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec2h> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec2h {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec2h as "const pxr::GfVec2h *" {
                return &(self->Get<pxr::GfVec2h>());
            })
        }
    }
}

// Rust [::half::f16; 2] as C++ pxr::VtValue<pxr::GfVec2h>
#[automatically_derived]
impl From<[::half::f16; 2]> for crate::pxr::VtValue {
    fn from(value: [::half::f16; 2]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec2h"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[::half::f16; 2]> for crate::pxr::VtValue {
    fn from(value: &[::half::f16; 2]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec2h *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [::half::f16; 2] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [::half::f16; 2] as "pxr::GfVec2h" {
                    return value.Get<pxr::GfVec2h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [::half::f16; 2].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [::half::f16; 2] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [::half::f16; 2] as "pxr::GfVec2h" {
                    return value->Get<pxr::GfVec2h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [::half::f16; 2].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[::half::f16; 2]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[::half::f16; 2] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[::half::f16; 2] as "const pxr::GfVec2h *" {
                return &(self->Get<pxr::GfVec2h>());
            })
        }
    }
}

// Rust crate::pxr::GfVec2i as C++ pxr::VtValue<pxr::GfVec2i>
#[automatically_derived]
impl From<crate::pxr::GfVec2i> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec2i) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec2i"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec2i> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec2i) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec2i *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec2i {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec2i as "pxr::GfVec2i" {
                    return value.Get<pxr::GfVec2i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec2i.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec2i {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec2i as "pxr::GfVec2i" {
                    return value->Get<pxr::GfVec2i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec2i.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec2i> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec2i {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec2i as "const pxr::GfVec2i *" {
                return &(self->Get<pxr::GfVec2i>());
            })
        }
    }
}

// Rust [i32; 2] as C++ pxr::VtValue<pxr::GfVec2i>
#[automatically_derived]
impl From<[i32; 2]> for crate::pxr::VtValue {
    fn from(value: [i32; 2]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec2i"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[i32; 2]> for crate::pxr::VtValue {
    fn from(value: &[i32; 2]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec2i *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [i32; 2] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [i32; 2] as "pxr::GfVec2i" {
                    return value.Get<pxr::GfVec2i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [i32; 2].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [i32; 2] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec2i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [i32; 2] as "pxr::GfVec2i" {
                    return value->Get<pxr::GfVec2i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [i32; 2].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[i32; 2]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[i32; 2] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[i32; 2] as "const pxr::GfVec2i *" {
                return &(self->Get<pxr::GfVec2i>());
            })
        }
    }
}

// Rust crate::pxr::GfVec3d as C++ pxr::VtValue<pxr::GfVec3d>
#[automatically_derived]
impl From<crate::pxr::GfVec3d> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec3d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec3d"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec3d> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec3d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec3d *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec3d {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec3d as "pxr::GfVec3d" {
                    return value.Get<pxr::GfVec3d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec3d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec3d {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec3d as "pxr::GfVec3d" {
                    return value->Get<pxr::GfVec3d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec3d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec3d> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec3d {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec3d as "const pxr::GfVec3d *" {
                return &(self->Get<pxr::GfVec3d>());
            })
        }
    }
}

// Rust [f64; 3] as C++ pxr::VtValue<pxr::GfVec3d>
#[automatically_derived]
impl From<[f64; 3]> for crate::pxr::VtValue {
    fn from(value: [f64; 3]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec3d"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[f64; 3]> for crate::pxr::VtValue {
    fn from(value: &[f64; 3]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec3d *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [f64; 3] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [f64; 3] as "pxr::GfVec3d" {
                    return value.Get<pxr::GfVec3d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f64; 3].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [f64; 3] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [f64; 3] as "pxr::GfVec3d" {
                    return value->Get<pxr::GfVec3d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f64; 3].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[f64; 3]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[f64; 3] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[f64; 3] as "const pxr::GfVec3d *" {
                return &(self->Get<pxr::GfVec3d>());
            })
        }
    }
}

// Rust crate::pxr::GfVec3f as C++ pxr::VtValue<pxr::GfVec3f>
#[automatically_derived]
impl From<crate::pxr::GfVec3f> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec3f) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec3f"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec3f> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec3f) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec3f *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec3f {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec3f as "pxr::GfVec3f" {
                    return value.Get<pxr::GfVec3f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec3f.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec3f {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec3f as "pxr::GfVec3f" {
                    return value->Get<pxr::GfVec3f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec3f.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec3f> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec3f {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec3f as "const pxr::GfVec3f *" {
                return &(self->Get<pxr::GfVec3f>());
            })
        }
    }
}

// Rust [f32; 3] as C++ pxr::VtValue<pxr::GfVec3f>
#[automatically_derived]
impl From<[f32; 3]> for crate::pxr::VtValue {
    fn from(value: [f32; 3]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec3f"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[f32; 3]> for crate::pxr::VtValue {
    fn from(value: &[f32; 3]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec3f *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [f32; 3] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [f32; 3] as "pxr::GfVec3f" {
                    return value.Get<pxr::GfVec3f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f32; 3].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [f32; 3] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [f32; 3] as "pxr::GfVec3f" {
                    return value->Get<pxr::GfVec3f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f32; 3].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[f32; 3]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[f32; 3] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[f32; 3] as "const pxr::GfVec3f *" {
                return &(self->Get<pxr::GfVec3f>());
            })
        }
    }
}

// Rust crate::pxr::GfVec3h as C++ pxr::VtValue<pxr::GfVec3h>
#[automatically_derived]
impl From<crate::pxr::GfVec3h> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec3h) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec3h"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec3h> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec3h) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec3h *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec3h {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec3h as "pxr::GfVec3h" {
                    return value.Get<pxr::GfVec3h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec3h.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec3h {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec3h as "pxr::GfVec3h" {
                    return value->Get<pxr::GfVec3h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec3h.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec3h> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec3h {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec3h as "const pxr::GfVec3h *" {
                return &(self->Get<pxr::GfVec3h>());
            })
        }
    }
}

// Rust [::half::f16; 3] as C++ pxr::VtValue<pxr::GfVec3h>
#[automatically_derived]
impl From<[::half::f16; 3]> for crate::pxr::VtValue {
    fn from(value: [::half::f16; 3]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec3h"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[::half::f16; 3]> for crate::pxr::VtValue {
    fn from(value: &[::half::f16; 3]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec3h *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [::half::f16; 3] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [::half::f16; 3] as "pxr::GfVec3h" {
                    return value.Get<pxr::GfVec3h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [::half::f16; 3].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [::half::f16; 3] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [::half::f16; 3] as "pxr::GfVec3h" {
                    return value->Get<pxr::GfVec3h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [::half::f16; 3].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[::half::f16; 3]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[::half::f16; 3] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[::half::f16; 3] as "const pxr::GfVec3h *" {
                return &(self->Get<pxr::GfVec3h>());
            })
        }
    }
}

// Rust crate::pxr::GfVec3i as C++ pxr::VtValue<pxr::GfVec3i>
#[automatically_derived]
impl From<crate::pxr::GfVec3i> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec3i) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec3i"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec3i> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec3i) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec3i *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec3i {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec3i as "pxr::GfVec3i" {
                    return value.Get<pxr::GfVec3i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec3i.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec3i {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec3i as "pxr::GfVec3i" {
                    return value->Get<pxr::GfVec3i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec3i.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec3i> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec3i {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec3i as "const pxr::GfVec3i *" {
                return &(self->Get<pxr::GfVec3i>());
            })
        }
    }
}

// Rust [i32; 3] as C++ pxr::VtValue<pxr::GfVec3i>
#[automatically_derived]
impl From<[i32; 3]> for crate::pxr::VtValue {
    fn from(value: [i32; 3]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec3i"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[i32; 3]> for crate::pxr::VtValue {
    fn from(value: &[i32; 3]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec3i *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [i32; 3] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [i32; 3] as "pxr::GfVec3i" {
                    return value.Get<pxr::GfVec3i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [i32; 3].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [i32; 3] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec3i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [i32; 3] as "pxr::GfVec3i" {
                    return value->Get<pxr::GfVec3i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [i32; 3].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[i32; 3]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[i32; 3] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[i32; 3] as "const pxr::GfVec3i *" {
                return &(self->Get<pxr::GfVec3i>());
            })
        }
    }
}

// Rust crate::pxr::GfVec4d as C++ pxr::VtValue<pxr::GfVec4d>
#[automatically_derived]
impl From<crate::pxr::GfVec4d> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec4d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec4d"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec4d> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec4d) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec4d *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec4d {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec4d as "pxr::GfVec4d" {
                    return value.Get<pxr::GfVec4d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec4d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec4d {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec4d as "pxr::GfVec4d" {
                    return value->Get<pxr::GfVec4d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec4d.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec4d> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec4d {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec4d as "const pxr::GfVec4d *" {
                return &(self->Get<pxr::GfVec4d>());
            })
        }
    }
}

// Rust [f64; 4] as C++ pxr::VtValue<pxr::GfVec4d>
#[automatically_derived]
impl From<[f64; 4]> for crate::pxr::VtValue {
    fn from(value: [f64; 4]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec4d"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[f64; 4]> for crate::pxr::VtValue {
    fn from(value: &[f64; 4]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec4d *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [f64; 4] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [f64; 4] as "pxr::GfVec4d" {
                    return value.Get<pxr::GfVec4d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f64; 4].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [f64; 4] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4d" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [f64; 4] as "pxr::GfVec4d" {
                    return value->Get<pxr::GfVec4d>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f64; 4].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[f64; 4]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[f64; 4] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[f64; 4] as "const pxr::GfVec4d *" {
                return &(self->Get<pxr::GfVec4d>());
            })
        }
    }
}

// Rust crate::pxr::GfVec4f as C++ pxr::VtValue<pxr::GfVec4f>
#[automatically_derived]
impl From<crate::pxr::GfVec4f> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec4f) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec4f"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec4f> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec4f) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec4f *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec4f {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec4f as "pxr::GfVec4f" {
                    return value.Get<pxr::GfVec4f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec4f.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec4f {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec4f as "pxr::GfVec4f" {
                    return value->Get<pxr::GfVec4f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec4f.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec4f> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec4f {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec4f as "const pxr::GfVec4f *" {
                return &(self->Get<pxr::GfVec4f>());
            })
        }
    }
}

// Rust [f32; 4] as C++ pxr::VtValue<pxr::GfVec4f>
#[automatically_derived]
impl From<[f32; 4]> for crate::pxr::VtValue {
    fn from(value: [f32; 4]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec4f"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[f32; 4]> for crate::pxr::VtValue {
    fn from(value: &[f32; 4]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec4f *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [f32; 4] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [f32; 4] as "pxr::GfVec4f" {
                    return value.Get<pxr::GfVec4f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f32; 4].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [f32; 4] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4f" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [f32; 4] as "pxr::GfVec4f" {
                    return value->Get<pxr::GfVec4f>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [f32; 4].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[f32; 4]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[f32; 4] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[f32; 4] as "const pxr::GfVec4f *" {
                return &(self->Get<pxr::GfVec4f>());
            })
        }
    }
}

// Rust crate::pxr::GfVec4h as C++ pxr::VtValue<pxr::GfVec4h>
#[automatically_derived]
impl From<crate::pxr::GfVec4h> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec4h) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec4h"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec4h> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec4h) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec4h *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec4h {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec4h as "pxr::GfVec4h" {
                    return value.Get<pxr::GfVec4h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec4h.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec4h {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec4h as "pxr::GfVec4h" {
                    return value->Get<pxr::GfVec4h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec4h.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec4h> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec4h {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec4h as "const pxr::GfVec4h *" {
                return &(self->Get<pxr::GfVec4h>());
            })
        }
    }
}

// Rust [::half::f16; 4] as C++ pxr::VtValue<pxr::GfVec4h>
#[automatically_derived]
impl From<[::half::f16; 4]> for crate::pxr::VtValue {
    fn from(value: [::half::f16; 4]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec4h"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[::half::f16; 4]> for crate::pxr::VtValue {
    fn from(value: &[::half::f16; 4]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec4h *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [::half::f16; 4] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [::half::f16; 4] as "pxr::GfVec4h" {
                    return value.Get<pxr::GfVec4h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [::half::f16; 4].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [::half::f16; 4] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4h" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [::half::f16; 4] as "pxr::GfVec4h" {
                    return value->Get<pxr::GfVec4h>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [::half::f16; 4].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[::half::f16; 4]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[::half::f16; 4] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[::half::f16; 4] as "const pxr::GfVec4h *" {
                return &(self->Get<pxr::GfVec4h>());
            })
        }
    }
}

// Rust crate::pxr::GfVec4i as C++ pxr::VtValue<pxr::GfVec4i>
#[automatically_derived]
impl From<crate::pxr::GfVec4i> for crate::pxr::VtValue {
    fn from(value: crate::pxr::GfVec4i) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec4i"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&crate::pxr::GfVec4i> for crate::pxr::VtValue {
    fn from(value: &crate::pxr::GfVec4i) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec4i *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for crate::pxr::GfVec4i {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> crate::pxr::GfVec4i as "pxr::GfVec4i" {
                    return value.Get<pxr::GfVec4i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec4i.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for crate::pxr::GfVec4i {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> crate::pxr::GfVec4i as "pxr::GfVec4i" {
                    return value->Get<pxr::GfVec4i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type crate::pxr::GfVec4i.",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<crate::pxr::GfVec4i> for crate::pxr::VtValue {
    fn as_ref(&self) -> &crate::pxr::GfVec4i {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &crate::pxr::GfVec4i as "const pxr::GfVec4i *" {
                return &(self->Get<pxr::GfVec4i>());
            })
        }
    }
}

// Rust [i32; 4] as C++ pxr::VtValue<pxr::GfVec4i>
#[automatically_derived]
impl From<[i32; 4]> for crate::pxr::VtValue {
    fn from(value: [i32; 4]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "pxr::GfVec4i"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(value);
            })
        }
    }
}
#[automatically_derived]
impl From<&[i32; 4]> for crate::pxr::VtValue {
    fn from(value: &[i32; 4]) -> Self {
        unsafe {
            ::cpp::cpp!([value as "const pxr::GfVec4i *"] -> crate::pxr::VtValue as "pxr::VtValue" {
                return pxr::VtValue(*value);
            })
        }
    }
}
#[automatically_derived]
impl TryFrom<crate::pxr::VtValue> for [i32; 4] {
    type Error = String;
    fn try_from(value: crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "pxr::VtValue"] -> [i32; 4] as "pxr::GfVec4i" {
                    return value.Get<pxr::GfVec4i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [i32; 4].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl TryFrom<&crate::pxr::VtValue> for [i32; 4] {
    type Error = String;
    fn try_from(value: &crate::pxr::VtValue) -> Result<Self, Self::Error> {
        if value.GetTypeName().to_string() == "GfVec4i" {
            Ok(unsafe {
                ::cpp::cpp!([value as "const pxr::VtValue *"] -> [i32; 4] as "pxr::GfVec4i" {
                    return value->Get<pxr::GfVec4i>();
                })
            })
        } else {
            Err(format!(
                "Cannot cast C++ type pxr::VtValue<{}> to Rust type [i32; 4].",
                value.GetTypeName()
            ))
        }
    }
}
#[automatically_derived]
impl AsRef<[i32; 4]> for crate::pxr::VtValue {
    fn as_ref(&self) -> &[i32; 4] {
        unsafe {
            ::cpp::cpp!([self as "const pxr::VtValue *"] -> &[i32; 4] as "const pxr::GfVec4i *" {
                return &(self->Get<pxr::GfVec4i>());
            })
        }
    }
}
